{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Bootstrap an AWS Virtual Private Cloud.  Create the VPC, public subnets in redundant availability zones, internet gateway, private application subnets in redundant availability zones, database private subnets in redundant availability zones, public subnet group, private application subnet group, database subnet group, routes and network ACLs.  Instantiate instances for bastion and nat hosts",
    "Parameters": {
        "SSHFrom": {
            "Description": "SSH access to bastion host will be restricted to this CIDR (default: can be accessed from anywhere)",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/xf."
        },
        "KeypairName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access via bastion to all resulting instances",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "255",
            "AllowedPattern": "[\\x20-\\x7E]*",
            "ConstraintDescription": "can contain only ASCII characters."
        },
        "BastionInstanceType": {
            "Description": "Bastion Host EC2 instance type",
            "Type": "String",
            "Default": {{default_ec2_instance_type|to_json}},
            "AllowedValues": {{ supported_ec2_instance_types|to_json }},
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "NatInstanceType": {
            "Description": "NAT Host EC2 instance type",
            "Type": "String",
            "Default": {{default_ec2_instance_type|to_json}},
            "AllowedValues": {{ supported_ec2_instance_types|to_json }},
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "ServiceRole": {
            "Type": "String",
            "Description": "Name of the Role to use to establish an Instance Profile to associate with the instance"
        },
	"CreateBucket": {
	    "Type": "String",
	    "Default": "False",
	    "Description": "Set to 'True' to create Elb Logging S3 Bucket & Policy."
	},
        "CreateS3Endpoint": {
            "Type": "String",
            "Default": "False",
            "Description": "Set to 'True' to create a VPC endpoint to S3."
        }
    },
    "Conditions": {
	"CreateBucketCondition": {"Fn::Equals": [{"Ref": "CreateBucket"}, "True"]}
    },
    "Mappings": {
        "AZMap": {{ aws_accounts[account_name]["map_region_plus_redundant_zone_number_to_vpc_valid_az"] | to_json }},
        "AWSInstanceType2Arch": {{ map_aws_instance_type_to_architecture|to_json }},
        "AWSRegionArch2BastionAMI": {{ map_aws_region_plus_arch_to_public_bastion_ami|to_json }},
        "AWSRegionArch2NatAMI": {{ map_aws_region_plus_arch_to_public_nat_ami|to_json }}
    },
    "Resources": {

{# Establish a Nucleator-maintained logging bucket in this region #}
	"ElbLoggingBucket" : {
	    "Type" : "AWS::S3::Bucket",
	    "Metadata" : { "DocString" :
			   "S3 Bucket used by Nucleator to store logs from elastic loadbalancers in Nucleator Stacksets." },
	    "Condition" : "CreateBucketCondition",
	    "DeletionPolicy" : "Retain",
	    "Properties" : {
		"BucketName" : "elb-{{nucleator_logging_bucketname_specification}}-{{cage_name}}",
		"Tags": [
		    { "Key": "Name", "Value": "elb-{{nucleator_logging_bucketname_specification}}-{{cage_name}}" },
		    { "Key": "NucleatorGroup", "Value": "nucleatorElbLogging" },
		    {{ nucleator_common_tags | to_json_fragment }}
		]
	    }
	},

	"ElbLoggingBucketPolicy" : {
	    "Type" : "AWS::S3::BucketPolicy",
	    "Metadata" : { "DocString" :
			   "Policy that permits AWS ELB Service to put logging information into the ELB Logging Bucket" },
	    "Condition" : "CreateBucketCondition",
	    "DeletionPolicy" : "Retain",
	    "Properties" : {
		"Bucket" : {
		    "Ref": "ElbLoggingBucket"
		},
		"PolicyDocument": {
		    "Version": "2008-10-17",
		    "Id": "ElbLoggingBucketPolicy-{{nucleator_logging_bucketname_specification}}-{{cage_name}}",
		    "Statement": [
			{
			    "Sid": "AwsPut-{{nucleator_logging_bucketname_specification}}-{{cage_name}}",
			    "Effect": "Allow",
			    "Principal": {
				"AWS": [
				    "127311923021",
				    "027434742980",
				    "797873946194",
				    "156460612806",
				    "054676820928",
				    "582318560864",
				    "114774131450",
				    "783225319266",
				    "507241528517"
				]
			    },
			    "Action": [
				"s3:PutObject"
			    ],
			    "Resource": "arn:aws:s3:::elb-{{nucleator_logging_bucketname_specification}}-{{cage_name}}/*"
			}
		    ]
		}
	    }
	},
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "{{ network_topology["vpc_cidr"] }}",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                ".",
                                [
                                    "vpc",
				    "{{cage_name}}",
				    "{{customer_name}}",
                                    "unresolvable"
                                ]
                            ]
                        }
                    },
		    { "Key": "NucleatorGroup", "Value": "networking" },
		    {{ nucleator_common_tags | to_json_fragment }}
                ]
            }
        },
        "PublicSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": "{{ network_topology["public1_cidr"] }}",
                "AvailabilityZone": {
                    "Fn::FindInMap": [
                        "AZMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AZ1"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                ".",
                                [
				    "public1",
                                    "vpc",
				    "{{cage_name}}",
				    "{{customer_name}}",
                                    "unresolvable"
                                ]
                            ]
                        }
                    },
		    { "Key": "NucleatorGroup", "Value": "networking" },
		    {{ nucleator_common_tags | to_json_fragment }}
                ]
            }
        },
        "PublicSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": "{{ network_topology["public2_cidr"] }}",
                "AvailabilityZone": {
                    "Fn::FindInMap": [
                        "AZMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AZ2"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                ".",
                                [
				    "public2",
                                    "vpc",
				    "{{cage_name}}",
				    "{{customer_name}}",
                                    "unresolvable"
                                ]
                            ]
                        }
                    },
		    { "Key": "NucleatorGroup", "Value": "networking" },
		    {{ nucleator_common_tags | to_json_fragment }}
                ]
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                ".",
                                [
				    "gateway",
                                    "vpc",
				    "{{cage_name}}",
				    "{{customer_name}}",
                                    "unresolvable"
                                ]
                            ]
                        }
                    },
		    { "Key": "NucleatorGroup", "Value": "networking" },
		    {{ nucleator_common_tags | to_json_fragment }}
                ]
            }
        },
        "AttachGateway": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                ".",
                                [
				    "routes",
				    "public",
                                    "vpc",
				    "{{cage_name}}",
				    "{{customer_name}}",
                                    "unresolvable"
                                ]
                            ]
                        }
                    },
		    { "Key": "NucleatorGroup", "Value": "networking" },
		    {{ nucleator_common_tags | to_json_fragment }}
                ]
            }
        },
        "PublicInternetRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "AttachGateway",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicSubnet1RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "PublicSubnet2RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnet2"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "PublicNetworkAcl": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                ".",
                                [
				    "acl",
				    "public",
                                    "vpc",
				    "{{cage_name}}",
				    "{{customer_name}}",
                                    "unresolvable"
                                ]
                            ]
                        }
                    },
		    { "Key": "NucleatorGroup", "Value": "networking" },
		    {{ nucleator_common_tags | to_json_fragment }}
                ]
            }
        },
	{% if not NUCLEATOR_CAGE_REMOVE_INBOUND_PUBLIC_RULES %}
	{% set rule_counter = [NUCLEATOR_CAGE_CIDR_WHITELIST_INITIAL_RULENUM] %}
	{% for entry in (public_acl.inbound_whitelist_entries if not NUCLEATOR_CAGE_OPENVPN_ENABLED else (public_acl.inbound_whitelist_entries|list + public_acl.inbound_whitelist_openvpn_entries|list)) %}
	{% set cidr_counter=0 %}
	{% for whitelist_cidr in NUCLEATOR_CAGE_CIDR_WHITELIST %}
	"{{entry.name}}{{cidr_counter}}" : {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "Egress": "false",
		"RuleNumber": {{rule_counter[-1]}},
		"CidrBlock": "{{whitelist_cidr}}",
		{{entry.properties | to_json_fragment}}
            }
        },
	{% if rule_counter.append(rule_counter[-1]+1) %}{% endif %}
	{% set cidr_counter = cidr_counter + 1 %}
	{% endfor %}
	{% endfor %}
	{% for entry in public_acl.inbound_entries %}
	"{{entry.name}}" : {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "Egress": "false",
		"RuleNumber": {{rule_counter[-1]}},
		{{entry.properties | to_json_fragment}}
            }
        },
	{% if rule_counter.append(rule_counter[-1]+1) %}{% endif %}
	{% endfor %}
	{% endif %}

	{% for entry in public_acl.outbound_entries %}
	"{{entry.name}}" : {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "Egress": "true",
		{{entry.properties | to_json_fragment}}
            }
        },
	{% endfor %}

        "PublicSubnet1NetworkAclAssociation": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                },
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                }
            }
        },
        "PublicSubnet2NetworkAclAssociation": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnet2"
                },
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                }
            }
        },
        "PrivateSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "AvailabilityZone": {
                    "Fn::FindInMap": [
                        "AZMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AZ1"
                    ]
                },
                "CidrBlock": "{{ network_topology["private1_cidr"] }}",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                ".",
                                [
				    "private1",
                                    "vpc",
				    "{{cage_name}}",
				    "{{customer_name}}",
                                    "unresolvable"
                                ]
                            ]
                        }
                    },
		    { "Key": "NucleatorGroup", "Value": "networking" },
		    {{ nucleator_common_tags | to_json_fragment }}
                ]
            }
        },
        "PrivateSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "AvailabilityZone": {
                    "Fn::FindInMap": [
                        "AZMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AZ2"
                    ]
                },
                "CidrBlock": "{{ network_topology["private2_cidr"] }}",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                ".",
                                [
				    "private2",
                                    "vpc",
				    "{{cage_name}}",
				    "{{customer_name}}",
                                    "unresolvable"
                                ]
                            ]
                        }
                    },
		    { "Key": "NucleatorGroup", "Value": "networking" },
		    {{ nucleator_common_tags | to_json_fragment }}
                ]
            }
        },
        "PrivateRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                ".",
                                [
				    "routes",
				    "private",
                                    "vpc",
				    "{{cage_name}}",
				    "{{customer_name}}",
                                    "unresolvable"
                                ]
                            ]
                        }
                    },
		    { "Key": "NucleatorGroup", "Value": "networking" },
		    {{ nucleator_common_tags | to_json_fragment }}
                ]
            }
        },
        "PrivateSubnet1RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnet1"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                }
            }
        },
        "PrivateSubnet2RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnet2"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                }
            }
        },
        "PrivateNatRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "InstanceId": {
                    "Fn::GetAtt": [
                        "NatInstance",
                        "Outputs.InstanceId"
                    ]
                }
            }
        },
        "PrivateNetworkAcl": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                ".",
                                [
				    "acl",
				    "private",
                                    "vpc",
				    "{{cage_name}}",
				    "{{customer_name}}",
                                    "unresolvable"
                                ]
                            ]
                        }
                    },
		    { "Key": "NucleatorGroup", "Value": "networking" },
		    {{ nucleator_common_tags | to_json_fragment }}
                ]
            }
        },

	{% for entry in private_acl.inbound_entries %}
	"{{entry.name}}" : {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "PrivateNetworkAcl"
                },
                "Egress": "false",
		{{entry.properties | to_json_fragment}}
            }
        },
	{% endfor %}

	{% for entry in private_acl.outbound_entries %}
	"{{entry.name}}" : {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "PrivateNetworkAcl"
                },
                "Egress": "true",
		{{entry.properties | to_json_fragment}}
            }
        },
	{% endfor %}

        "PrivateSubnet1NetworkAclAssociation": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnet1"
                },
                "NetworkAclId": {
                    "Ref": "PrivateNetworkAcl"
                }
            }
        },
        "PrivateSubnet2NetworkAclAssociation": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnet2"
                },
                "NetworkAclId": {
                    "Ref": "PrivateNetworkAcl"
                }
            }
        },
        "NatIpAddress": {
            "Type": "AWS::EC2::EIP",
            "DependsOn": "AttachGateway",
            "Properties": {
                "Domain": "vpc",
                "InstanceId": {
                    "Fn::GetAtt": [
                        "NatInstance",
                        "Outputs.InstanceId"
                    ]
                }
            }
        },
        "NatInstance": {
            "Type": "AWS::CloudFormation::Stack",
            "DependsOn": "NatSecurityGroup",
            "Properties": {
                "TemplateURL": "{{template_s3_accessor_url}}/instance.json",
                "Parameters": {
                    "InstanceName": "nat.{{cage_name}}.{{customer_domain}}",
                    "NucleatorGroup": "nat",
                    "InstanceType": {
                        "Ref": "NatInstanceType"
                    },
                    "KeypairName": {
                        "Ref": "KeypairName"
                    },
                    "ImageId": {
                        "Fn::FindInMap": [
                            "AWSRegionArch2NatAMI",
                            {
                                "Ref": "AWS::Region"
                            },
                            {
                                "Fn::FindInMap": [
                                    "AWSInstanceType2Arch",
                                    {
                                        "Ref": "NatInstanceType"
                                    },
                                    "Arch"
                                ]
                            }
                        ]
                    },
                    "ServiceRole": {
                        "Ref": "ServiceRole"
                    },
                    "SourceDestCheck": "false",
                    "SubnetId": {
                        "Ref": "PublicSubnet1"
                    },
                    "SecurityGroupId": {
                        "Ref": "NatSecurityGroup"
                    }
                }
            }
        },
        "NatSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable internal access to the NAT device",
                "VpcId": {
                    "Ref": "VPC"
                },
		{{ nat_security_group_ingress | to_json_fragment }},
		{{ nat_security_group_egress | to_json_fragment }},
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                ".",
                                [
				    "security",
				    "nat",
				    "{{cage_name}}",
				    "{{customer_name}}",
                                    "unresolvable"
                                ]
                            ]
                        }
                    },
		    { "Key": "NucleatorGroup", "Value": "networking" },
		    {{ nucleator_common_tags | to_json_fragment }}
                ]
            }
        },
        "DatabaseSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "AvailabilityZone": {
                    "Fn::FindInMap": [
                        "AZMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AZ1"
                    ]
                },
                "CidrBlock": "{{ network_topology["db1_cidr"] }}",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                ".",
                                [
				    "db1",
                                    "vpc",
				    "{{cage_name}}",
				    "{{customer_name}}",
                                    "unresolvable"
                                ]
                            ]
                        }
                    },
		    { "Key": "NucleatorGroup", "Value": "networking" },
		    {{ nucleator_common_tags | to_json_fragment }}
                ]
            }
        },
        "DatabaseSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "AvailabilityZone": {
                    "Fn::FindInMap": [
                        "AZMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AZ2"
                    ]
                },
                "CidrBlock": "{{ network_topology["db2_cidr"] }}",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                ".",
                                [
				    "db2",
                                    "vpc",
				    "{{cage_name}}",
				    "{{customer_name}}",
                                    "unresolvable"
                                ]
                            ]
                        }
                    },
		    { "Key": "NucleatorGroup", "Value": "networking" },
		    {{ nucleator_common_tags | to_json_fragment }}
                ]
            }
        },
        "DatabaseRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                ".",
                                [
				    "routes",
				    "db",
                                    "vpc",
				    "{{cage_name}}",
				    "{{customer_name}}",
                                    "unresolvable"
                                ]
                            ]
                        }
                    },
		    { "Key": "NucleatorGroup", "Value": "networking" },
		    {{ nucleator_common_tags | to_json_fragment }}
                ]
            }
        },
        "DatabaseSubnet1RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "DatabaseSubnet1"
                },
                "RouteTableId": {
                    "Ref": "DatabaseRouteTable"
                }
            }
        },
        "DatabaseSubnet2RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "DatabaseSubnet2"
                },
                "RouteTableId": {
                    "Ref": "DatabaseRouteTable"
                }
            }
        },
        "DatabaseRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "DatabaseRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "InstanceId": {
                    "Fn::GetAtt": [
                        "NatInstance",
                        "Outputs.InstanceId"
                    ]
                }
            }
        },
        "DatabaseNetworkAcl": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                ".",
                                [
				    "acl",
				    "db",
                                    "vpc",
				    "{{cage_name}}",
				    "{{customer_name}}",
                                    "unresolvable"
                                ]
                            ]
                        }
                    },
		    { "Key": "NucleatorGroup", "Value": "networking" },
		    {{ nucleator_common_tags | to_json_fragment }}
                ]
            }
        },

	{% for entry in database_acl.inbound_entries %}
	"{{entry.name}}" : {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "DatabaseNetworkAcl"
                },
                "Egress": "false",
		{{entry.properties | to_json_fragment}}
            }
        },
	{% endfor %}

	{% for entry in database_acl.outbound_entries %}
	"{{entry.name}}" : {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "DatabaseNetworkAcl"
                },
                "Egress": "true",
		{{entry.properties | to_json_fragment}}
            }
        },
	{% endfor %}

        "DatabaseSubnet1NetworkAclAssociation": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "DatabaseSubnet1"
                },
                "NetworkAclId": {
                    "Ref": "DatabaseNetworkAcl"
                }
            }
        },
        "DatabaseSubnet2NetworkAclAssociation": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "DatabaseSubnet2"
                },
                "NetworkAclId": {
                    "Ref": "DatabaseNetworkAcl"
                }
            }
        },
        "DatabaseSubnetGroup": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
                "DBSubnetGroupDescription": "Availability Zones for RDS DB",
                "SubnetIds": [
                    {
                        "Ref": "DatabaseSubnet1"
                    },
                    {
                        "Ref": "DatabaseSubnet2"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                ".",
                                [
				    "dbsubnetgroup",
                                    "vpc",
				    "{{cage_name}}",
				    "{{customer_name}}",
                                    "unresolvable"
                                ]
                            ]
                        }
                    },
		    { "Key": "NucleatorGroup", "Value": "networking" },
    		    {{ nucleator_common_tags | to_json_fragment }}
                ]
            }
        },
        "BastionInstance": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": "{{template_s3_accessor_url}}/instance.json",
                "Parameters": {
                    "InstanceName": "bastion.{{cage_name}}.{{customer_domain}}",
                    "NucleatorGroup": "bastion",
                    "InstanceType": {
                        "Ref": "BastionInstanceType"
                    },
                    "KeypairName": {
                        "Ref": "KeypairName"
                    },
                    "ImageId": {
                        "Fn::FindInMap": [
                            "AWSRegionArch2BastionAMI",
                            {
                                "Ref": "AWS::Region"
                            },
                            {
                                "Fn::FindInMap": [
                                    "AWSInstanceType2Arch",
                                    {
                                        "Ref": "BastionInstanceType"
                                    },
                                    "Arch"
                                ]
                            }
                        ]
                    },
                    "ServiceRole": {
                        "Ref": "ServiceRole"
                    },
                    "SubnetId": {
                        "Ref": "PublicSubnet1"
                    },
                    "SecurityGroupId": {
                        "Ref": "BastionSecurityGroup"
                    }
                }
            }
        },
        "BastionIpAddress": {
            "Type": "AWS::EC2::EIP",
            "DependsOn": "AttachGateway",
            "Properties": {
                "Domain": "vpc"
            }
        },
        "BastionIpAssocation": {
            "Type": "AWS::EC2::EIPAssociation",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "BastionIpAddress",
                        "AllocationId"
                    ]
                },
                "InstanceId": {
                    "Fn::GetAtt": [
                        "BastionInstance",
                        "Outputs.InstanceId"
                    ]
                }
            }
        },
        "BastionDnsRecord": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
                "HostedZoneName": "{{ cage_name }}.{{customer_domain}}.",
                "Comment": "A record for bastion server.",
                "Name": "bastion.{{cage_name}}.{{customer_domain}}",
                "Type": "A",
                "TTL": "300",
                "ResourceRecords": [
                    {
                        "Ref": "BastionIpAddress"
                    }
                ]
            }
        },
        "BastionSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable access to / from the Bastion host",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
		    {% for entry in bastion_cidr_whitelist_ingress_rules %}
		    {% set outer_loop = loop %}
		    {% for whitelist_cidr in NUCLEATOR_CAGE_CIDR_WHITELIST %}
		    {
			"CidrIp": "{{whitelist_cidr}}",
			{{entry|to_json_fragment}}
		    }{{"" if loop.last and outer_loop.last else ","}}
		    {% endfor %}
		    {% endfor %}
                ],
                "SecurityGroupEgress": [
		    {{bastion_egress_rules|to_json_fragment}}
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                ".",
                                [
				    "security",
                                    "bastion",
				    "{{cage_name}}",
				    "{{customer_name}}",
                                    "unresolvable"
                                ]
                            ]
                        }
                    },
		    { "Key": "NucleatorGroup", "Value": "networking" },
    		    {{ nucleator_common_tags | to_json_fragment }}
                ]
            }
        },
        "VpcToS3Endpoint": {
          "Type" : "AWS::EC2::VPCEndpoint",
          "Properties" : {
{#            "PolicyDocument" : JSON object,  #}
            "RouteTableIds" : [
                 { "Ref": "PublicRouteTable" },
                 { "Ref": "PrivateRouteTable" },
                 { "Ref": "DatabaseRouteTable" }
            ],
            "ServiceName" : "com.amazonaws.{{hostvars.localhost.cage_names[cage_name].region}}.s3",
            "VpcId" : {"Ref": "VPC"}
          }
        }
    },
    "Outputs": {
        "VpcId": {
            "Description": "ID of the VPC created for this cage",
            "Value": {
                "Ref": "VPC"
            }
        },
        "NatSecurityGroupId": {
            "Description": "ID of the NAT Security Group.  Use this to add ingress rules for instances and beanstalks in the private subnet.",
            "Value": {
                "Ref": "NatSecurityGroup"
            }
        },
        "BastionSecurityGroupId": {
            "Description": "ID of the Bastion Security Group.  Use this as a source security group to enable ssh from bastion to instances and beanstalks in the private subnet.",
            "Value": {
                "Ref": "BastionSecurityGroup"
            }
        },
        "PublicNetworkAclId": {
            "Description": "ID of the Cage's Public Network ACL",
            "Value": {
                "Ref": "PublicNetworkAcl"
            }
        },
        "PrivateNetworkAclId": {
            "Description": "ID of the Cage's Private Network ACL",
            "Value": {
                "Ref": "PrivateNetworkAcl"
            }
        },
        "DatabaseNetworkAclId": {
            "Description": "ID of the Cage's Database Network ACL",
            "Value": {
                "Ref": "DatabaseNetworkAcl"
            }
        },
        "PublicSubnet1Id": {
            "Description": "ID of the first redundant public subnet",
            "Value": {
                "Ref": "PublicSubnet1"
            }
        },
        "PublicSubnet2Id": {
            "Description": "ID of the second redundant public subnet",
            "Value": {
                "Ref": "PublicSubnet2"
            }
        },
	"PublicSubnet1Az": {
            "Description": "Availability zone in which the first public subnet resides",
            "Value": {
		"Fn::FindInMap": [
                    "AZMap",
                    {
                        "Ref": "AWS::Region"
                    },
                    "AZ1"
                ]
            }
	},
	"PublicSubnet2Az": {
            "Description": "Availability zone in which the second public subnet resides",
            "Value": {
		"Fn::FindInMap": [
                    "AZMap",
                    {
                        "Ref": "AWS::Region"
                    },
                    "AZ2"
                ]
            }
	},
        "PrivateSubnet1Id": {
            "Description": "ID of the first redundant private application subnet",
            "Value": {
                "Ref": "PrivateSubnet1"
            }
        },
        "PrivateSubnet2Id": {
            "Description": "ID of the second redundant private application subnet",
            "Value": {
                "Ref": "PrivateSubnet2"
            }
        },
	"PrivateSubnet1Az": {
            "Description": "Availability zone in which the first private subnet resides",
            "Value": {
		"Fn::FindInMap": [
                    "AZMap",
                    {
                        "Ref": "AWS::Region"
                    },
                    "AZ1"
                ]
            }
	},
	"PrivateSubnet2Az": {
            "Description": "Availability zone in which the second private subnet resides",
            "Value": {
		"Fn::FindInMap": [
                    "AZMap",
                    {
                        "Ref": "AWS::Region"
                    },
                    "AZ2"
                ]
            }
	},
        "DatabaseSubnet1Id": {
            "Description": "ID of database subnet1",
            "Value": {
                "Ref": "DatabaseSubnet1"
            }
        },
        "DatabaseSubnet2Id": {
            "Description": "ID of the private subnet",
            "Value": {
                "Ref": "DatabaseSubnet2"
            }
        },
	"DatabaseSubnet1Az": {
            "Description": "Availability zone in which the first database subnet resides",
            "Value": {
		"Fn::FindInMap": [
                    "AZMap",
                    {
                        "Ref": "AWS::Region"
                    },
                    "AZ1"
                ]
            }
	},
	"DatabaseSubnet2Az": {
            "Description": "Availability zone in which the second database subnet resides",
            "Value": {
		"Fn::FindInMap": [
                    "AZMap",
                    {
                        "Ref": "AWS::Region"
                    },
                    "AZ2"
                ]
            }
	},
        "DatabaseSubnetGroupId": {
            "Description": "ID of the database subnet group",
            "Value": {
                "Ref": "DatabaseSubnetGroup"
            }
        },
        "BastionIp": {
            "Description": "IP Address of the Bastion host",
            "Value": {
                "Ref": "BastionIpAddress"
            }
        }
    }
}
